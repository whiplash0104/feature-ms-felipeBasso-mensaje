# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- azure-pipelines

pool:
  vmImage: ubuntu-latest
  
jobs:
- job: build
  displayName: 'Build'
  steps:
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        **/build/libs/*.jar
        **/build/**/*.xml
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: appJar
      publishLocation: 'Container'




- job: buildimage
  displayName:  Build Image
  dependsOn: build
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'appJar'
      downloadPath: '$(Pipeline.Workspace)'
    displayName: 'Build'

  - script: "mkdir -p build/libs; mv $(Pipeline.Workspace)/appJar/build/libs/ build/; chmod -R 555 build/libs"  
    displayName:  Se mueve JAR a carpeta raiz
  
  - task: Docker@2
    inputs:
      containerRegistry: 'Docker-registry'
      command: 'login'
  - task: Docker@2
    inputs:
      repository: 'felipebasso/feature-ms-felipebasso-mensaje'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
           
- job: Deploy
  dependsOn: buildimage
  steps:
  - task: Kubernetes@1
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
      azureResourceGroup: 'aks-getting-started'
      kubernetesCluster: 'aks-getting-started'
      command: 'login'
    displayName:  Autenticacion cluster kubernetes

  - task: KubernetesManifest@0
    inputs:
      action: 'createSecret'
      kubernetesServiceConnection: 'Azure-k8s'
      namespace: 'default'
      secretType: 'dockerRegistry'
      secretName: 'az-k8s-secret'
      dockerRegistryEndpoint: 'Docker-registry'
    displayName:  Integracion k8s y docker registry
